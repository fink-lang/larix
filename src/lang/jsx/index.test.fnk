{describe, it, expect, to_match_snapshot, to_throw} = import '../../testing/jest'

{parse_expr} = import '../../'


describe:: 'JSX <Foobar>...</Foobar>', fn:

  it:: 'parses self closing elem: <Foobar />', fn:
    expect::
      parse_expr:: `<Foobar />`
      to_match_snapshot


  it:: 'parses self closing elem with short attr: <Foobar spam />', fn:
    expect::
      parse_expr:: `<Foobar spam />`
      to_match_snapshot


  it:: 'parses self closing elem with str attr: <Foobar spam="ni" />', fn:
    expect::
      parse_expr:: `<Foobar spam="ni" />`
      to_match_snapshot


  it:: 'parses self closing elem with str attr: <Foobar spam=\'ni\' />', fn:
    expect::
      parse_expr:: `<Foobar spam='ni' />`
      to_match_snapshot


  it:: 'parses self closing elem with expr attr: <Foobar spam={ni} />', fn:
    expect::
      parse_expr:: `<Foobar spam={ni} />`
      to_match_snapshot


  it:: 'parses empty elem: <Foobar></Foobar>', fn:
    expect::
      parse_expr:: `<Foobar></Foobar>`
      to_match_snapshot


  it:: 'parses elem with children: <Foobar><Spam /></Foobar>', fn:
    expect::
      parse_expr:: `
        <Foobar ni>
          <Spam />
        </Foobar>
      `
      to_match_snapshot


  it:: 'parses elem with expr in body: <Foobar> {...} </Foobar>', fn:
    expect::
      parse_expr:: `
        <Foobar>
          {1 + 2}
        </Foobar>
      `
      to_match_snapshot


describe:: 'JSX parse errors', fn:
  it:: 'throws with invalid attr value', fn:
    expect::
      fn: parse_expr:: '<Foobar spam=123 />', 'test.fnk'
      to_throw:: `
        test.fnk:1:13
        1| <Foobar spam=123 />
                        ^

        Expected one of [ '{', '\"', \"'\" ] but found '123'.
      `
