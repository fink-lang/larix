{curr_value, curr_loc} = import '@fink/prattler/parser.fnk'
{next_is} = import '@fink/prattler/parser.fnk'
{advance} = import '@fink/prattler/parser.fnk'
{add_error} = import '@fink/prattler/errors.fnk'

{prefix} = import '../expressions.fnk'
{terminated_block} = import '../block/init.fnk'
{single_expression} = import '../block/expr.fnk'
{get_unindented_text} = import '../literals/string.fnk'
{identifier} = import '../identifier/init.fnk'



jsx_expr_container = fn ctx:
  [block, next_ctx] = terminated_block ctx, 'jsx-expr-end'
  expr = {...block, type: 'block'}
  {end} = curr_loc next_ctx
  [{type: 'jsx:expr', expr, loc: {start: expr.loc.start, end}}, next_ctx]



jsx_txt = fn ctx:
  {value, loc} = ctx.curr_token
  [{type: 'jsx:text', value, loc}, ctx]



get_children = fn ctx:
  match ctx.next_token:
    {type: 'jsx-elem-close'}:
      [[], ctx]

    {type: 'jsx-text'}:
      [expr, children_ctx] = jsx_txt advance ctx
      [children, end_ctx] = get_children children_ctx
      [[expr, ...children], end_ctx]

    {type: 'jsx-frag-open'}:
      [expr, children_ctx] = jsx_frag advance ctx
      [children, end_ctx] = get_children children_ctx
      [[expr, ...children], end_ctx]

    {type: 'jsx-elem-start'}:
      [expr, children_ctx] = jsx_elem advance ctx
      [children, end_ctx] = get_children children_ctx
      [[expr, ...children], end_ctx]

    {type: 'jsx-expr-start'}:
      [expr, children_ctx] = jsx_expr_container advance ctx
      [children, end_ctx] = get_children children_ctx
      [[expr, ...children], end_ctx]

    else:
      [err, err_ctx] =  add_error ctx,
        'Expected JSX element <...>, </...> or JSX text or JSX expr {...}.'
        ctx.next_token
      [[err], err_ctx]


jsx_ident = fn ctx:
  identifier advance ctx



jsx_body = fn name, ctx:
  [children, close_ctx] = get_children ctx

  end_ctx = match close_ctx.next_token:
    # TODO: name can also be a member expr, ...
    {type: 'jsx-elem-close', value: '</${name.value}>'}:
      advance close_ctx
    else:
      [, err_ctx] =  add_error close_ctx,
        'Expected JSX closing element </${name.value}>.'
        close_ctx.next_token
      err_ctx

  [children, end_ctx]



jsx_string_val = fn ctx:
  {start} = curr_loc ctx
  op = curr_value ctx

  [{loc: {end}, ...str}, next_ctx] = get_unindented_text ctx, op

  [{...str, loc: {start, end}}, next_ctx]



jsx_attr_value = fn ctx:
  match ctx.next_token:
    {type: 'jsx-expr-start'}:
      jsx_expr_container advance ctx

    {type: 'str-start'}:
      jsx_string_val advance ctx

    else:
      single_expression {...ctx, jsx: true}, 0



jsx_attr = fn ctx:
  [name, value_ctx] = jsx_ident ctx
  {start} = name.loc

  [value, next_ctx] = match value_ctx:
    next_is ?, '=':
      jsx_attr_value advance value_ctx

    else:
      [false, value_ctx]

  {end} = curr_loc next_ctx
  [{type: 'jsx:attr', name, value, loc: {start, end}}, next_ctx]



jsx_spread_attr = fn ctx:
  {start} = curr_loc ctx
  [right, next_ctx] = single_expression {...ctx, jsx: true}, 0
  {end} = curr_loc next_ctx

  [{type: 'spread', op: '...', right, loc: {start, end}}, next_ctx]



jsx_props = fn ctx:

  match ctx.next_token:
    {type: 'jsx-elem-close', value: '/>'}:
      [[], ctx]

    {type: 'jsx-elem-end'}:
      [[], ctx]

    {type: '...'}:
      [expr, next_ctx] = jsx_spread_attr advance ctx
      [props, end_ctx] = jsx_props next_ctx
      [[expr, ...props], end_ctx]

    {type: 'ident'}:
      [expr, next_ctx] = jsx_attr ctx
      [props, end_ctx] = jsx_props next_ctx
      [[expr, ...props], end_ctx]

    else:
      [err, err_ctx] =  add_error ctx,
        'Expected JSX prop identifier, spread expr, or end of tag.'
        ctx.next_token
      [[err], err_ctx]



body_or_end_elem = fn ctx, name:
  match ctx.next_token:
    {type: 'jsx-elem-end'}:
      [children, next_ctx] = jsx_body name, advance ctx
      [false, children, next_ctx]

    {type: 'jsx-elem-close'}:
      [true, [], advance ctx]

    else:
      [err, err_ctx] =  add_error ctx,
        'Expected end of JSX tag.'
        ctx.next_token
      [false, [err], err_ctx]



jsx_elem = fn ctx:
  {start} = curr_loc ctx

  [name, elem_ctx] = jsx_ident ctx
  [props, body_ctx] = jsx_props elem_ctx
  [self_closing, children, next_ctx] = body_or_end_elem body_ctx, name

  {end} = curr_loc next_ctx

  list:
    {type: 'jsx:elem', name, props, children, self_closing, loc: {start, end}}
    next_ctx



jsx_frag = fn ctx:
  {start} = curr_loc ctx

  [children, close_ctx] = get_children ctx

  end_ctx = match close_ctx.next_token:
    {type: 'jsx-elem-close', value: '</>'}:
      advance close_ctx
    else:
      [, err_ctx] =  add_error ctx,
        'Expected closing JSX fragment </>.'
        ctx.next_token
      err_ctx

  {end} = curr_loc end_ctx
  [{type: 'jsx:frag', children, loc: {start, end}}, end_ctx]



jsx_elem_or_fragment = fn ctx:
  match ctx.curr_token:
    {type: 'jsx-frag-open'}:
      jsx_frag ctx
    else:
      jsx_elem ctx



jsx = fn token_type:
  rec:
    ...prefix token_type

    nud: fn: fn ctx:
      jsx_elem_or_fragment ctx

