{inspect} = import 'util'

{curr_loc, next_loc, next_is, next_is_end, has_errors} = import '@fink/prattler'
{advance} = import '@fink/prattler'
{add_error} = import '@fink/prattler/errors'
{end_token} = import '@fink/prattler/tokenizer'


end_of_block_indent = Symbol 'end-of-block-indentation'


curr_indentation = fn {blocks}:
  [{curr_ind}] = blocks
  curr_ind


next_is_new_expr = fn ctx:
  {start: {column}} = next_loc ctx
  column <= curr_indentation ctx


next_is_unindented = fn ctx:
  {blocks: [block]} = ctx
  {min_ind} = block

  match next_loc ctx:
    {start: {column: ? < min_ind}}:
      true
    else:
      false


next_is_indented = fn ctx:
  curr_ind = curr_indentation ctx
  {end: {line: curr_line}} = curr_loc ctx
  {start: {line: next_line, column: next_ind}} = next_loc ctx

  curr_line < next_line && curr_ind < next_ind


pop_block = fn ctx:
  {blocks: [{end_symbol}, ...blocks]} = ctx
  next_ctx = {...ctx, blocks}

  match end_symbol:
    end_of_block_indent:
      match next_ctx:
        next_is_end ?: advance next_ctx
        else: next_ctx

    else:
      match ctx:
        next_is ?, end_symbol:
          advance next_ctx, end_symbol

        has_errors ?:
          ctx

        else:
          # TODO: use curr block's min indentation in msg
          [, err_ctx] = add_error ctx,
            `Expected ',' or indented new line or ${inspect end_symbol}.`
            ctx.next_token

          err_ctx

push_block = fn ctx, end_symbol:
  {blocks} = ctx
  curr_ind = curr_indentation ctx

  block = match end_symbol:
    end_token:
      {end_symbol, curr_ind, min_ind: curr_ind}
    else:
      {end_symbol, curr_ind, min_ind: curr_ind + 1}

  {...ctx, blocks: [block, ...blocks]}


update_indentation = fn ctx:
  {start: {column}} = next_loc ctx
  {blocks: [block, ...blocks]} = ctx

  indented_block = {...block, curr_ind: column, min_ind: column}

  {...ctx, blocks: [indented_block, ...blocks]}


init_indentation = fn ctx:
  {...ctx, blocks: [{end_symbol: end_token, min_ind: 0, curr_ind: 0}]}
