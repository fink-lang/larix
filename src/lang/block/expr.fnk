{advance, expression, next_is, has_errors} = import '@fink/prattler/parser.fnk'
{curr_loc, next_loc} = import '@fink/prattler/parser.fnk'
{add_error} = import '@fink/prattler/errors.fnk'
{unfold, filter} = import '@fink/std-lib/iter.fnk'

{update_indentation, push_block, pop_block} = import './indentation.fnk'
{next_is_unindented} = import './indentation.fnk'
{next_is_indented} = import './indentation.fnk'
{get_comments} = import '../comments/collect.fnk'



empty_expr = fn {loc: {end}}:
  {type: 'empty', value: '', loc: {start: end, end}}



get_end_symb = fn {blocks: [block]}:
  block.end_symbol



end_of_block_tokens = [':', '}', ']', ')', 'str-expr-end', 'jsx-expr-end', 'end']



next_is_end_of_block = fn ctx:
  match ctx:
    {next_token: {type: ? in end_of_block_tokens}}:
      true

    next_is_unindented ?:
      true

    else:
      false



next_is_nl = fn ctx:
  {end: {line: curr_line}} = curr_loc ctx
  {start: {line: next_line}} = next_loc ctx
  curr_line < next_line



get_all = fn ctx, single_expr:
  # TODO this is a monster, needs breakdown
  [[, [exprs, next_ctx]]] = pipe [, [[], ctx, true, false]]:
    unfold fn [, [exprs, ctx, at_start, was_comma]]:
      match ctx:
        has_errors ?:
          [true, [exprs, ctx]]

        next_is_indented ?:
          next_ctx = update_indentation ctx
          [false, [exprs, next_ctx, true, was_comma]]

        next_is_end_of_block ?:
          match was_comma:
            true:
              expr = empty_expr ctx.curr_token
              [true, [[...exprs, expr], ctx]]
            else:
              [true, [exprs, ctx]]

        next_is ?, ',':
          next_ctx = advance ctx

          match at_start:
            true:
              expr = empty_expr ctx.next_token
              [false, [[...exprs, expr], next_ctx, true, false]]

            else:
              match next_ctx:
                next_is ?, ',':
                  expr = empty_expr ctx.next_token
                  [false, [[...exprs, expr], next_ctx, false, false]]
                else:
                  [false, [exprs, next_ctx, true, true]]

        else:
          match at_start:
            false:
              [, err_ctx] = add_error ctx,
                'Expected `,` or indented new line or ${get_end_symb ctx}.'
                ctx.next_token

              [true, [exprs, err_ctx]]
            else:
              # TODO: check if next is actually a start of an expr.
              [expr, next_ctx] = single_expr ctx
              # new line at end of expr is a separator
              next_is_start = next_is_nl next_ctx

              [false, [[...exprs, expr], next_ctx, next_is_start, false]]

    filter fn [done]: done

  [exprs, next_ctx]



expressions = fn ctx, end_symbol, single_expr:
  {start} = curr_loc ctx

  block_ctx = push_block ctx, end_symbol

  [exprs, next_ctx] = get_all block_ctx, single_expr

  end_ctx = pop_block next_ctx

  {end} = curr_loc end_ctx
  [{type: 'exprs', exprs, loc: {start, end}}, end_ctx]



single_expression = fn ctx, lbp=0:
  [leading, expr_ctx] = get_comments ctx

  [expr, next_ctx] = expression expr_ctx, lbp
  [{...expr, comments: {leading}}, next_ctx]

  # [trailing, end_ctx] = get_trailing_comments next_ctx
  # [{...expr, comments: {leading, trailing}}, end_ctx]


