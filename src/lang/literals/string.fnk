{curr_loc, next_loc} = import '@fink/prattler/parser.fnk'
{curr_value, advance} = import '@fink/prattler/parser.fnk'
{add_separator, add_literal, left_binding} = import '@fink/prattler/expressions.fnk'
{add_error} = import '@fink/prattler/errors.fnk'

{rx, match_all, replace_all} = import '@fink/std-lib/regex.fnk'
{starts_with, slice} = import '@fink/std-lib/str.fnk'
{map, filter, flatten, length} = import '@fink/std-lib/iter.fnk'
{min} = import '@fink/std-lib/math.fnk'
{max_int} = import '@fink/std-lib/num.fnk'

{terminator} = import '../expressions.fnk'
{terminated_block} = import '../block/init.fnk'
{next_is_new_expr, curr_indentation} = import '../block/indentation.fnk'



curr_next_adjecent = fn ctx:
  curr = curr_loc ctx
  next = next_loc ctx

  curr.end.line == next.start.line and curr.end.column == next.start.column



get_str_empty = fn ctx:
  {start} = curr_loc ctx
  end = start
  {type: 'string:text', value: '', loc: {start, end}}



get_expr_part = fn ctx:
  [block, next_ctx] = terminated_block ctx, 'str-expr-end'
  expr = match block:
    {exprs: 1 < length ?}:
      {...block, type: 'block'}
    else:
      {exprs: [expr]} = block
      expr
  [expr, next_ctx]



get_str_part = fn ctx:
  value = curr_value ctx
  loc = curr_loc ctx
  [{type: 'string:text', value, loc}, ctx]



get_parts = fn ctx:
  match ctx.next_token:
    {type: 'str-end'}:
      expr = get_str_empty ctx
      [[expr], advance ctx]

    {type: 'str-text'}:
      [expr, next_ctx] = get_str_part advance ctx
      match next_ctx.next_token:
        {type: 'str-end'}:
          [[expr], advance next_ctx]
        else:
          [rest, end_ctx] = get_parts next_ctx
          [[expr, ...rest], end_ctx]

    {type: 'str-expr-start'}:
      [expr, next_ctx] = get_expr_part advance ctx
      [rest, end_ctx] = get_parts next_ctx

      exprs = match ctx.curr_token:
        {type: 'str-expr-end'}:
          list:
            get_str_empty ctx
            expr, ...rest
        else:
          [expr, ...rest]

      [exprs, end_ctx]

    else:
      [, err_ctx] = add_error ctx,
        'Unexpected end of code.'
        ctx.next_token
      [[], err_ctx]


get_str_ind = fn str, min_ind:
  matched = match_all str, rx'\n([ ]{${min_ind},})'
  pipe matched:
    map fn [, spaces]: length spaces



get_unindent = fn ctx, parts:
  min_ind = 1 + curr_indentation ctx

  ind = pipe parts:
    filter fn part:
      match part:
        {type: 'string:text'}: true
        else: false

    map fn part:
      get_str_ind part.value, min_ind

    flatten

    min max_int, ...?


  fn str: replace_all str, rx'\n[ ]{0,${ind}}', '\n'



get_unindented_text = fn ctx, op:
  {start} = curr_loc ctx

  [[first_part, ...parsed_parts], next_ctx] = get_parts ctx, op

  parts = match first_part:
    {type: 'string:text'}:
      [first_part, ...parsed_parts]
    else:
      expr = get_str_empty ctx
      [expr, first_part, ...parsed_parts]

  {end} = curr_loc next_ctx

  unindent = get_unindent ctx, parts

  [first, ...rest] = pipe parts:
    map fn part:
      match part:
        {type: 'string:text'}:
          value = unindent part.value
          {...part, value}
        else:
          part

  # remove first empty line
  exprs = match first.value:
    starts_with ?, '\n':
      [{...first, value: slice first.value, 1}, ...rest]
    else:
      [first, ...rest]

  [{type: 'string', op, exprs, tag: false, loc: {start, end}}, next_ctx]



string = fn token_type:
  rec:
    ...left_binding token_type

    lbp: fn lbp: fn ctx, left:
      match true:
        # default indentation behaviour
        next_is_new_expr ctx: 0
        left.type == 'ident' and curr_next_adjecent ctx: lbp
        else: 0

    led: fn: fn ctx, left:
      {loc: {start}} = left
      op = curr_value ctx

      [{loc: {end}, ...str}, next_ctx] = get_unindented_text ctx, op
      [{...str, tag: left, loc: {start, end}}, next_ctx]

    nud: fn: fn ctx:
      op = curr_value ctx
      get_unindented_text ctx, op



add_string = fn ctx:
  pipe ctx:
    add_literal string 'str-start'
    add_separator terminator 'str-expr-end'

