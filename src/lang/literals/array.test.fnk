{decribe, it, expect, to_match_snapshot, to_throw} = import '../../testing/jest'

{parse_expr} = import '../../'


describe:: 'array [...]', fn:

  it:: 'parses empty: []', fn:
    expect::
      parse_expr:: `[]`
      to_match_snapshot


  it:: 'parses single elemement: [1]', fn:
    expect::
      parse_expr:: `[1]`
      to_match_snapshot


  it:: 'parses multiple elements: [1, 2]', fn:
    expect::
      parse_expr:: `[1, 2]`
      to_match_snapshot

    expect::
      parse_expr:: `[1, 2, 3]`
      to_match_snapshot


  it:: 'parses leading commas: [,, foo]', fn:
    expect::
      parse_expr:: `[,, foo]`
      to_match_snapshot


  it:: 'parses trailing commas: [...foo,,]', fn:
    expect::
      parse_expr:: `[...foo, ]`
      to_match_snapshot

    expect::
      parse_expr:: `[...foo, , ]`
      to_match_snapshot

    expect::
      parse_expr:: `[, ...foo, ]`
      to_match_snapshot


describe:: 'array block', fn:
  it:: 'parses empty', fn:
    expect::
      parse_expr:: `
        [
        ]`
      to_match_snapshot


  it:: 'parses single elemement', fn:
    expect::
      parse_expr:: `
        [
          1
        ]`
      to_match_snapshot


  it:: 'parses multiple elements', fn:
    expect::
      parse_expr:: `
        [
          1
          2
        ]`
      to_match_snapshot

    expect::
      parse_expr:: `
        [
          1, 2
        ]`
      to_match_snapshot


  it:: 'parses leading commas', fn:
    expect::
      parse_expr:: `
        [
          ,
          ,
          foo
        ]`
      to_match_snapshot

    expect::
      parse_expr:: `
        [
          ,,
          foo
        ]`
      to_match_snapshot


  it:: 'parses trailing commas', fn:
    expect::
      parse_expr:: `
        [
          foo
          ,
        ]`
      to_match_snapshot

    expect::
      parse_expr:: `
        [
          foo
          ,
          ,
        ]`
      to_match_snapshot

    expect::
      parse_expr:: `
        [
          ,
          ...foo
          ,
        ]`
      to_match_snapshot


describe:: 'list', fn:
  it:: 'parses single elemement', fn:
    expect::
      parse_expr:: `
        list:
          1
        `
      to_match_snapshot


  it:: 'parses multiple elements', fn:
    expect::
      parse_expr:: `
        list:
          1
          2
        `
      to_match_snapshot


  it:: 'parses leading commas', fn:
    expect::
      parse_expr:: `
        list:
          ,
          ,
          foo
        `
      to_match_snapshot

    expect::
      parse_expr:: `
        list:
          ,,
          foo
        `
      to_match_snapshot


  it:: 'parses trailing commas', fn:
    expect::
      parse_expr:: `
        list:
          foo
          ,
        `
      to_match_snapshot

    expect::
      parse_expr:: `
        list:
          foo
          ,
          ,
        `
      to_match_snapshot

    expect::
      parse_expr:: `
        list:
          ,
          ...foo
          ,
        `
      to_match_snapshot


describe:: 'array [...] - parsing failures', fn:
  it:: `throws when missing ']'`, fn:
    expect::
      fn: parse_expr:: `[`, 'test.fnk'

      to_throw:: `
        test.fnk:1:1
        1| [
            ^

        Expected ',' or indented new line or ']'.`


  it:: `throws when missing ']'`, fn:
    expect::
      fn: parse_expr:: `[1)]`, 'test.fnk'

      to_throw:: `
        test.fnk:1:2
        1| [1)]
             ^

        Expected ',' or new-line or end of expressions.`


