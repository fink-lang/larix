{describe, it, expect, to_match_snapshot} = import '@fink/jest/test.fnk'

{parse_expr, parse} = import '../../parser.fnk'



describe 'strings', fn:

  it 'parses empty strings', fn:
    expect
      parse_expr '""'
      to_match_snapshot

    expect
      parse_expr "''"
      to_match_snapshot


  it 'parses single line strings', fn:
    expect
      parse_expr '"foo bar"'
      to_match_snapshot

    expect
      parse_expr "'foo bar'"
      to_match_snapshot


  it 'parses multi line strings', fn:
    expect
      parse_expr "'\n  foobar\n    spam shrub\n   ni'"
      to_match_snapshot

    expect
      parse_expr "fn:\n  '\n    foobar\n     spam shrub\n    ni\n  '"
      to_match_snapshot


  it 'parses escape characters', fn:
    expect
      parse_expr "' $ \\n \\t \\' \\\\'"
      to_match_snapshot

    expect
      parse_expr '" $ \\n \\t \\" \\\\"'
      to_match_snapshot

    expect
      parse_expr "'foo \\\${bar + spam}'"
      to_match_snapshot


  it 'parses tagged strings', fn:
    expect
      parse_expr "foo'bar spam'"
      to_match_snapshot

    expect
      parse_expr 'foo"bar spam"'
      to_match_snapshot


  it 'parses template strings with expressions', fn:
    expect
      parse_expr "'foo \${bar + spam} spam'"
      to_match_snapshot

    expect
      parse_expr '"foo \${bar + spam} spam"'
      to_match_snapshot

    expect
      parse_expr '"\${foo}"'
      to_match_snapshot


  it 'parses multiline template strings', fn:
    expect
      parse_expr "
        '\n  \${foo}:\${bar}:\${
          shrub = 1234
          shrub * 10
        }\n\n  ni\n'
        "
      to_match_snapshot


  it 'parses nested template strings', fn:
    expect
      parse_expr "'\\n\${foo bar, '  \${spam}'}\\n'"
      to_match_snapshot


  it 'handles default indentation for lbp', fn:
    expect
      parse "
        'foobar'
        'spam'
        "
      to_match_snapshot


  it 'foo', fn:
    expect
      parse "'\${foo}\${bar}_\${spam}'"
      to_match_snapshot



describe 'string - parsing failures', fn:

  it 'errors when missing end', fn:
    expect
      parse '"foo bar,', 'test.fnk'
      to_match_snapshot


  it 'errors when not tagged with identifier', fn:
    expect
      parse "12'bar spam'", 'test.fnk'
      to_match_snapshot


