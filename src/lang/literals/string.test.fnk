{describe, it, eq, to_throw, snapshot} = import '../../testing/jest'

{parse_expr, parse} = import '../../'


describe:: 'strings', fn:

  it:: 'parses empty strings', fn:
    # TODO: should not need to escape `
    parse_expr('\`\`') eq snapshot
    parse_expr('""') eq snapshot
    parse_expr(`''`) eq snapshot


  it:: 'parses single line strings', fn:
    # TODO: should not need to escape `
    parse_expr('\`foo bar\`') eq snapshot
    parse_expr('"foo bar"') eq snapshot
    parse_expr(`'foo bar'`) eq snapshot


  it:: 'parses multi line strings', fn:
    parse_expr(`'
      foobar
        spam shrub
      ni'
    `) eq snapshot


  it:: 'parses escape characters', fn:
    # TODO: should not need to escape `
    parse_expr('\` \\n \\t \\\\ \\\` \`') eq snapshot
    parse_expr(`' \\n \\t \\\\ \\\` '`) eq snapshot
    parse_expr(`" \\n \\t \\\\ \\\` "`) eq snapshot


  it:: 'parses tagged strings', fn:
    parse_expr('foo\`bar spam\`') eq snapshot
    parse_expr(`foo'bar spam'`) eq snapshot
    parse_expr(`foo"bar spam"`) eq snapshot


  it:: 'parses template strings with expressions', fn:
    # TODO: should not need to escape `
    parse_expr('\`foo \${bar + spam} spam\`') eq snapshot
    parse_expr(`'foo \${bar + spam} spam'`) eq snapshot
    parse_expr(`"foo \${bar + spam} spam"`) eq snapshot


  it:: 'parses multiline template strings', fn:
    parse_expr(`
      '
        \${foo}:\${bar}:\${spam + ni}

        ni
      '
    `) eq snapshot


  it:: `handles default indentation for lbp`, fn:
    parse(`
      'foobar'
      'spam'
    `) eq snapshot


describe:: 'string - parsing failures', fn:

  it:: 'throws when missing end', fn:
    (
      fn: parse_expr('"foo bar,', 'test.fnk')
    ) to_throw `
      test.fnk:1:8
      1| "foo bar,
                 ^

      Unexpected end of code.
    `


  it:: 'throws when not tagged with identifier', fn:
    (
      fn: parse_expr(`12'bar spam'`, 'test.fnk')
    ) to_throw `
      test.fnk:1:2
      1| 12'bar spam'
           ^

      Expected identifier before tagged string.
    `


