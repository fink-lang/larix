{describe, it, eq, to_throw, snapshot} = import '../../testing/jest'

{parse_expr} = import '../../'


describe:: 'object {...}', fn:

  it:: 'parses empty: {}', fn:
    parse_expr(`{}`) eq snapshot


  it:: 'parses single shorthand prop: {foo}', fn:
    parse_expr(`{foo}`) eq snapshot


  it:: 'parses multiple shorthand exprs: {foo, bar}', fn:
    parse_expr(`{foo, bar}`) eq snapshot


  it:: 'parses multiple shorthand exprs: {foo, bar}', fn:
    parse_expr(`{foo, bar: 123, shrub: 'ni'}`) eq snapshot


  it:: 'parses single prop: {foo: spam}', fn:
    parse_expr(`{foo: spam}`) eq snapshot


  it:: 'parses spread prop: {foo, ...bar}', fn:
    parse_expr(`{foo, ...bar}`) eq snapshot


  it:: `parses single str prop: {'foo': spam}`, fn:
    parse_expr(`{'foo': spam}`) eq snapshot


  it:: 'parses default assignment prop: {foo=123}', fn:
    parse_expr(`{foo=123}`) eq snapshot


  it:: `parses calculated prop: {(Symbol('foo')): 123, ...}`, fn:
    parse_expr(`{foo, (Symbol('bar')): 123, spam}`) eq snapshot


  it:: 'parses single prop with block value: {foo: spam ...}', fn:
    parse_expr(`
      {
        foo:
          spam
          ni
      }
    `) eq snapshot



describe:: 'object {...} - parsing failures', fn:
  it:: `throws when missing '}'`, fn:
    (
      fn: parse_expr(`{`, 'test.fnk')
    ) to_throw `
      test.fnk:1:1
      1| {
          ^

      Expected '}' but found Symbol(end).
    `

  it:: `throws when missing '}'`, fn:
    (
      fn: parse_expr(`{foo) bar}`, 'test.fnk')
    ) to_throw `
      test.fnk:1:4
      1| {foo) bar}
             ^

      Expected '}' but found ')'.
    `
