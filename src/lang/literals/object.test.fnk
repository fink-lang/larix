{describe, it, expect, to_match_snapshot, to_throw} = import '../../testing/jest'

{parse_expr} = import '../../'


describe:: 'object {...}', fn:

  it:: 'parses empty: {}', fn:
    expect::
      parse_expr:: `{}`
      to_match_snapshot


  it:: 'parses single shorthand prop: {foo}', fn:
    expect::
      parse_expr:: `{foo}`
      to_match_snapshot


  it:: 'parses multiple shorthand exprs: {foo, bar}', fn:
    expect::
      parse_expr:: `{foo, bar}`
      to_match_snapshot


  it:: 'parses multiple shorthand exprs: {foo, bar}', fn:
    expect::
      parse_expr:: `{foo, bar: 123, shrub: 'ni'}`
      to_match_snapshot


  it:: 'parses single prop: {foo: spam}', fn:
    expect::
      parse_expr:: `{foo: spam}`
      to_match_snapshot


  it:: 'parses spread prop: {foo, ...bar}', fn:
    expect::
      parse_expr:: `{foo, ...bar}`
      to_match_snapshot


  it:: `parses single str prop: {'foo': spam}`, fn:
    expect::
      parse_expr:: `{'foo': spam}`
      to_match_snapshot


  it:: 'parses default assignment prop: {foo=123}', fn:
    expect::
      parse_expr:: `{foo=123}`
      to_match_snapshot


  it:: `parses calculated prop: {(...): 123, ...}`, fn:
    expect::
      parse_expr:: `{foo, (bar+ni): 123, spam}`
      to_match_snapshot


  it:: `parses keywords as keys`, fn:
    expect::
      parse_expr:: `
        {fn, match, fold, unfold, map, find, filter, await, attempt}
      `
      to_match_snapshot


describe:: 'dict', fn:
  it:: 'parses', fn:
    expect::
      parse_expr:: `
        dict:
          foo
          (bar+ni): 123
          spam
      `
      to_match_snapshot


describe:: 'object {...} - parsing failures', fn:
  it:: `throws when missing '}'`, fn:
    expect::
      fn: parse_expr:: `{`, 'test.fnk'

      to_throw:: `
        test.fnk:1:1
        1| {
            ^

        Expected ',' or indented new line or '}'.`


  it:: `throws when encountering bad end of prop`, fn:
    expect::
      fn: parse_expr:: `{foo) bar}`, 'test.fnk'

      to_throw:: `
        test.fnk:1:4
        1| {foo) bar}
               ^

        Expected ',' or indented new line or end of block.`

    expect::
      fn: parse_expr:: `{2*3: bar}`, 'test.fnk'

      to_throw:: `
        test.fnk:1:2
        1| {2*3: bar}
             ^

        Expected ',' or indented new line or end of block.`


  it:: `throws when encountering bad start of prop key`, fn:
    expect::
      fn: parse_expr:: `{foo, [bar]: spam}`, 'test.fnk'

      to_throw:: `
        test.fnk:1:6
        1| {foo, [bar]: spam}
                 ^

        Expected prop-key but found '['.`
