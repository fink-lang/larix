{describe, it, expect, to_match_snapshot, to_throw} = import '../../testing/jest'

{parse_expr} = import '../../'


describe:: 'object {...}', fn:

  it:: 'parses empty: {}', fn:
    expect::
      parse_expr:: `{}`
      to_match_snapshot


  it:: 'parses single shorthand prop: {foo}', fn:
    expect::
      parse_expr:: `{foo}`
      to_match_snapshot


  it:: 'parses multiple shorthand exprs: {foo, bar}', fn:
    expect::
      parse_expr:: `{foo, bar}`
      to_match_snapshot


  it:: 'parses multiple shorthand exprs: {foo, bar}', fn:
    expect::
      parse_expr:: `{foo, bar: 123, shrub: 'ni'}`
      to_match_snapshot


  it:: 'parses single prop: {foo: spam}', fn:
    expect::
      parse_expr:: `{foo: spam}`
      to_match_snapshot


  it:: 'parses spread prop: {foo, ...bar}', fn:
    expect::
      parse_expr:: `{foo, ...bar}`
      to_match_snapshot


  it:: `parses single str prop: {'foo': spam}`, fn:
    expect::
      parse_expr:: `{'foo': spam}`
      to_match_snapshot


  it:: 'parses default assignment prop: {foo=123}', fn:
    expect::
      parse_expr:: `{foo=123}`
      to_match_snapshot


  it:: `parses calculated prop: {(...): 123, ...}`, fn:
    expect::
      parse_expr:: `{foo, (bar+ni): 123, spam}`
      to_match_snapshot


  it:: 'parses single prop with block value: {foo: spam ...}', fn:
    expect::
      parse_expr:: `
        {
          foo:
            spam
            ni
        }
      `
      to_match_snapshot



describe:: 'object {...} - parsing failures', fn:
  it:: `throws when missing '}'`, fn:
    expect::
      fn: parse_expr:: `{`, 'test.fnk'

      to_throw:: `
        test.fnk:1:1
        1| {
            ^

        Expected '}' but found Symbol(end).
      `

  it:: `throws when missing '}'`, fn:
    expect::
      fn: parse_expr:: `{foo) bar}`, 'test.fnk'

      to_throw:: `
        test.fnk:1:4
        1| {foo) bar}
               ^

        Expected '}' but found ')'.
      `
