{describe, it, expect, to_match_snapshot} = import '@fink/jest/test.fnk'

{parse_expr, parse} = import '../../parser.fnk'



describe 'record {...}', fn:

  it 'parses empty: {}', fn:
    expect
      parse_expr '{}'
      to_match_snapshot


  it 'parses single shorthand prop', fn:
    expect
      parse_expr '{foo}'

      to_match_snapshot


  it 'parses single shorthand value', fn:
    expect
      parse_expr "{'foo'}"
      to_match_snapshot


  it 'parses multiple shorthand exprs', fn:
    expect
      parse_expr '{foo, bar, π}'
      to_match_snapshot


  it 'parses multiple shorthand exprs', fn:
    expect
      parse_expr "{foo, bar: 123, shrub: 'ni'}"
      to_match_snapshot


  it 'parses single prop', fn:
    expect
      parse_expr '{foo: spam}'
      to_match_snapshot


  it 'parses spread prop', fn:
    expect
      parse_expr '{foo, ...bar}'
      to_match_snapshot


  it 'parses single str prop}', fn:
    expect
      parse_expr "{'foo': spam}"
      to_match_snapshot


  it 'parses default assignment prop', fn:
    expect
      parse_expr '{foo=123}'
      to_match_snapshot


  it 'parses calculated prop', fn:
    expect
      parse_expr '{foo, (bar + ni): 123, spam}'
      to_match_snapshot


  it 'parses keywords as keys', fn:
    expect
      parse_expr '
        {fn, match, pipe, rec, list, await, throw, try}
      '
      to_match_snapshot

    expect
      parse_expr '
        rec:
          fn: 123
          rec: 345
          list: 123
      '
      to_match_snapshot

    expect
      parse_expr '{rec=123}'
      to_match_snapshot


  it 'parses unicode as keys', fn:
    expect
      parse_expr '{π, ƒ}'
      to_match_snapshot


  it 'parses member expr as key', fn:
    expect
      parse_expr '{foo.bar: 134, spam}'
      to_match_snapshot

    expect
      parse_expr '
        rec:
          foo.bar: 1234
          spam
          rec.list: 1234
      '
      to_match_snapshot

    expect
      parse_expr '{foo.bar.(spam): 1234}'
      to_match_snapshot

    expect
      parse_expr '{foo.bar=123}'
      to_match_snapshot

    expect
      parse_expr '{rec.list: lst=123, ni}'
      to_match_snapshot




describe 'records', fn:
  it 'parses', fn:
    expect
      parse_expr '
        rec:
          foo
          # prop comment
          (bar + ni): 123
          spam
          # trailing comment
      '
      to_match_snapshot



describe 'record {...} - parsing failures', fn:
  it 'errors when missing `}`', fn:
    expect
      parse '{', 'test.fnk'
      to_match_snapshot


  it 'errors when encountering bad end of prop', fn:
    expect
      parse '{foo) bar}', 'test.fnk'
      to_match_snapshot


  it 'errors when encountering bad key', fn:
    expect
      parse '{2*3: bar}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{+foo}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{-foo}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{*foo}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{/foo}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{?foo}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{:foo}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{{foo}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{}foo}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{[foo}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{]foo}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{)foo}', 'test.fnk'
      to_match_snapshot

    expect
      parse '{,foo}', 'test.fnk'
      to_match_snapshot


  it 'errors when encountering bad start of prop key', fn:
    expect
      parse '{foo, [bar]: spam}', 'test.fnk'
      to_match_snapshot
