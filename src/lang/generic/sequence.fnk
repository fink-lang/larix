{next_is_end, assert_advance, advance, expression, next_is} = import '@fink/prattler'


default_seq_expr = fn ctx: expression:: ctx, 0


rest_with_empty = fn expr, ctx, closing_symbol, seq_expr:
  [exprs, next_ctx] = seq::
    advance:: ctx
    closing_symbol
    seq_expr

  match exprs:
    {length: 0}: [[expr, null], next_ctx]
    else: [[expr, ...exprs], next_ctx]


seq = fn ctx, closing_symbol, seq_expr=default_seq_expr:
  match true:
    next_is_end:: ctx, closing_symbol:
      [[], assert_advance:: ctx, closing_symbol]

    next_is:: ctx, ',':
      rest_with_empty:: null, ctx, closing_symbol, seq_expr

    else:
      [expr, seq_ctx] = seq_expr:: ctx
      match true:
        next_is:: seq_ctx, ',':
          rest_with_empty:: expr, seq_ctx, closing_symbol, seq_expr
        else:
          [[expr], assert_advance:: seq_ctx, closing_symbol]
