{add_operator} = import '@fink/prattler/symbols'
{starts_with} = import '@fink/std-lib/str'

{infix} = import '../symbols'


arithm = fn op: infix op, 'arithm'

comp = fn op: infix op, 'comp'


# TODO: can overloading (jsx, <) be handled better
lt = fn op:
  dict:
    ...comp op

    lbp: fn lbp: fn ctx:

      match ctx:
        # TODO: this is a prattler internal interface
        {tokenizer: {partial_token: {value: starts_with ?, ' '}}}:
          lbp

        else:
          0


# TODO just enforce space before and after e.g. < to allow jsx overloading?
add_comparison_operators = fn ctx:
  pipe ctx:
    add_operator comp '=='
    add_operator comp '!='
    add_operator comp '>='
    add_operator comp '<='
    add_operator comp '>'
    add_operator lt '<'
