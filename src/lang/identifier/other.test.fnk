{describe, it, eq, to_throw, snapshot} = import '../../testing/jest'

{parse_expr, parse} = import '../../'


describe:: 'other symbols', fn:
  it:: 'parses a word', fn:
    parse_expr(`  foobar  `) eq snapshot


  it:: 'parses a non-word', fn:
    parse_expr(`  Ï€  `) eq snapshot


describe:: 'numbers', fn:
  it:: 'parses int 12345', fn:
    parse_expr(` 12345  `) eq snapshot


  it:: 'parses hex, oct, bin', fn:
    parse(`
      0x123456789abcdef0
      0x123456789abcde
      0o12345670
      0b101010
    `) eq snapshot


  it:: 'parses float 123.456', fn:
    parse_expr(`  123.456  `) eq snapshot


  it:: 'parses float 123.456e10', fn:
    parse(`
      123.456e78
      123.456e+78
      123.456e-78
    `) eq snapshot

  it:: 'throws when missing exponent', fn:
    (
      fn: parse_expr(`123.456e * 78`, 'test.fnk')
    ) to_throw `
      test.fnk:1:9
      1| 123.456e * 78
                  ^

      Expected exponent.
    `


describe:: 'symbols as infix operators', fn:
  it:: 'parses with left to right precendence', fn:
    parse_expr(`123 add 4 add 5`) eq snapshot

