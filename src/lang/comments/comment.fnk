{
  next_is_end, next_loc, collect_text, advance, expression
} = import '@fink/prattler'

{next_is_unindented} = import '../indentation'

{symbol} = import '../symbols'


collect_comments = fn ctx, op:
  [text, next_ctx] = collect_text:: ctx, '\n'
  comment = {op, ...text}

  match next_ctx:
    {next_token: {value: '#'}}:
      [comments, final_ctx] = collect_comments::
        advance:: next_ctx
        op
      [[comment, ...comments], final_ctx]
    else:
      [[comment], next_ctx]


comment = fn op:
  {
    ...symbol(op),

    nud: fn: fn ctx:
      [items, expr_ctx] = collect_comments:: ctx, op

      match expr_ctx:
        next_is_end:: ?:
          [{type: 'comment', op, exprs: items}, expr_ctx]

        next_is_unindented:: ?:
          [{type: 'comment', op, exprs: items}, expr_ctx]

        else:
          # TODO: should lbp be really 0
          [{comments, ...expr}, next_ctx] = expression:: expr_ctx, 0
          [{...expr, comments: {...comments, leading: items}}, next_ctx]
  }
