{advance_expected} = import '@fink/prattler/parser.fnk'

{add_named_block, indented_block} = import '../block/init.fnk'
{single_expression} = import '../block/expr.fnk'



get_condition = fn ctx:
  [left, next_ctx] = single_expression ctx, 0
  match left:
    {type: 'comment'}:
      [left, next_ctx]

    {type: 'block', op: 'else'}:
      [left, next_ctx]

    else:
      [left, advance_expected next_ctx, ':']



get_result = fn ctx:
  [{exprs, comments, loc}, next_ctx] = indented_block ctx
  [{type: 'block', exprs, comments, loc}, next_ctx]



cond_result_expr = fn ctx:
  [left, result_ctx] = get_condition ctx

  match left:
    {type: 'comment'}:
      [left, result_ctx]

    {type: 'block', op: 'else'}:
      [left, result_ctx]

    else:
      [right, next_ctx] = get_result result_ctx
      {start} = left.loc
      {end} = right.loc
      [{type: 'match:expr', left, right, loc: {start, end}}, next_ctx]



add_conditionals = fn ctx:
  pipe ctx:
    add_named_block 'match', 'block', cond_result_expr
    add_named_block 'else'
