{add_operator} = import '@fink/prattler/expressions.fnk'
{next_is, curr_loc, curr_value} = import '@fink/prattler/parser.fnk'

{prefix} = import '../expressions.fnk'
{single_expression} = import '../block/expr.fnk'



spread = fn token_type, expr_type:
  rec:
    ...prefix token_type

    nud: fn lbp: fn ctx:
      {start} = curr_loc ctx
      op = curr_value ctx

      [right, next_ctx] = match ctx:
        next_is ?, ',':
          [false, ctx]
        else:
          [expr, next_ctx] = single_expression ctx, lbp
          [expr, next_ctx]

      {end} = curr_loc next_ctx

      [{type: expr_type, op, right, loc: {start, end}}, next_ctx]



add_spread_operator = fn ctx:
  pipe ctx:
    add_operator spread '...', 'spread'
