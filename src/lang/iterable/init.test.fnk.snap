// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`filter item: ... parses 1`] = `
block filter (1:0-4:0)
  ident (1:7-1:11) item
  :
  comp == (2:2-2:15)
    arithm % (2:2-2:10)
      ident (2:2-2:6) item
      number (2:9-2:10) 2
    number (2:14-2:15) 0
`;

exports[`fn-blocks parses filter 1`] = `
module (1:0-4:0)
  assign = (1:0-1:18)
    ident (1:0-1:6) filter
    block fn (1:9-1:18):
      literal (1:13-1:18) false
  call (2:0-4:0)
    ident (2:0-2:6) filter
    block fn (2:7-4:0)
      ident (2:10-2:14) item
      :
      comp > (3:2-3:10)
        ident (3:2-3:6) item
        number (3:9-3:10) 2
`;

exports[`fn-blocks parses fold 1`] = `
module (1:0-4:0)
  assign = (1:0-1:16)
    ident (1:0-1:4) fold
    block fn (1:7-1:16):
      literal (1:11-1:16) false
  call (2:0-4:0)
    ident (2:0-2:4) fold
    block fn (2:5-4:0)
      ident (2:8-2:12) item
      :
      ident (3:2-3:6) item
`;

exports[`fn-blocks parses imports 1`] = `
module (1:0-2:0)
  assign = (1:0-1:75)
    rec (1:0-1:41)
      rec:kv (1:1-1:5)
        ident (1:1-1:5) fold
      rec:kv (1:7-1:13)
        ident (1:7-1:13) unfold
      rec:kv (1:15-1:18)
        ident (1:15-1:18) map
      rec:kv (1:20-1:26)
        ident (1:20-1:26) filter
      rec:kv (1:28-1:33)
        ident (1:28-1:33) while
      rec:kv (1:35-1:40)
        ident (1:35-1:40) until
    prefix import (1:44-1:75)
      string " (1:51-1:75)
        '@fink/std-lib/iter.fnk'
`;

exports[`fn-blocks parses map 1`] = `
module (1:0-4:0)
  assign = (1:0-1:15)
    ident (1:0-1:3) map
    block fn (1:6-1:15):
      literal (1:10-1:15) false
  call (2:0-4:0)
    ident (2:0-2:3) map
    block fn (2:4-4:0)
      ident (2:7-2:11) item
      :
      arithm * (3:2-3:10)
        ident (3:2-3:6) item
        number (3:9-3:10) 2
`;

exports[`fn-blocks parses unfold 1`] = `
module (1:0-4:0)
  assign = (1:0-1:18)
    ident (1:0-1:6) unfold
    block fn (1:9-1:18):
      literal (1:13-1:18) false
  call (2:0-4:0)
    ident (2:0-2:6) unfold
    block fn (2:7-4:0)
      ident (2:10-2:14) item
      :
      ident (3:2-3:6) item
`;

exports[`fn-blocks parses until 1`] = `
module (1:0-4:0)
  assign = (1:0-1:17)
    ident (1:0-1:5) until
    block fn (1:8-1:17):
      literal (1:12-1:17) false
  call (2:0-4:0)
    ident (2:0-2:5) until
    block fn (2:6-4:0)
      ident (2:9-2:13) item
      :
      ident (3:2-3:6) item
`;

exports[`fn-blocks parses while 1`] = `
module (1:0-4:0)
  assign = (1:0-1:17)
    ident (1:0-1:5) while
    block fn (1:8-1:17):
      literal (1:12-1:17) false
  call (2:0-4:0)
    ident (2:0-2:5) while
    block fn (2:6-4:0)
      ident (2:9-2:13) item
      :
      ident (3:2-3:6) item
`;

exports[`fold item, accu: ... parses 1`] = `
block fold (1:0-4:0)
  ident (1:5-1:9) item
  assign = (1:11-1:17)
    ident (1:11-1:15) accu
    number (1:16-1:17) 0
  :
  arithm + (2:2-2:13)
    ident (2:2-2:6) item
    ident (2:9-2:13) accu
`;

exports[`map item: ... parses 1`] = `
block map (1:0-4:0)
  ident (1:4-1:8) item
  :
  arithm * (2:2-2:10)
    ident (2:2-2:6) item
    number (2:9-2:10) 2
`;

exports[`unfold accu: ... parses 1`] = `
block unfold (1:0-3:0)
  assign = (1:7-1:17)
    ident (1:7-1:11) curr
    ident (1:12-1:17) start
  :
  arithm + (2:2-2:14)
    ident (2:2-2:7) start
    ident (2:10-2:14) accu
`;

exports[`unfold accu: ... parses no args 1`] = `
block unfold (1:0-4:0):
  ident (2:2-2:5) foo
`;

exports[`unfold accu: ... parses with item, accu result 1`] = `
block unfold (1:0-3:0)
  ident (1:7-1:11) prev
  assign = (1:13-1:18)
    ident (1:13-1:16) acc
    number (1:17-1:18) 0
  :
  list (2:2-2:28)
    arithm + (2:3-2:17)
      ident (2:3-2:6) acc
      arithm * (2:9-2:17)
        ident (2:9-2:13) prev
        number (2:16-2:17) 2
    arithm + (2:19-2:27)
      ident (2:19-2:23) prev
      number (2:26-2:27) 1
`;

exports[`until item: ... parses 1`] = `
block until (1:0-3:0)
  ident (1:6-1:10) item
  :
  comp == (2:2-2:15)
    arithm % (2:2-2:10)
      ident (2:2-2:6) item
      number (2:9-2:10) 2
    number (2:14-2:15) 0
`;

exports[`while item: ... parses 1`] = `
block while (1:0-4:0)
  ident (1:6-1:10) item
  :
  comp == (2:2-2:15)
    arithm % (2:2-2:10)
      ident (2:2-2:6) item
      number (2:9-2:10) 2
    number (2:14-2:15) 0
`;
