{next_is_end, assert_advance, expression} = import '@fink/prattler'
{curr_loc} = import '@fink/prattler'
{end_token} = import '@fink/prattler/tokenizer'


parse_module = fn ctx:
  {start} = curr_loc(ctx)

  [exprs, next_ctx] = pipe [[], ctx]:
    unfold [exprs, body_ctx]:
      match true:
        next_is_end(body_ctx):
          [null, body_ctx]
        else:
          expression(body_ctx, 0)

    while [expr]:
      expr != null

    fold [expr, next_ctx], [exprs]=[[]]:
      [[...exprs, expr], next_ctx]


  {end} = curr_loc(next_ctx)
  final_ctx = assert_advance(next_ctx, end_token)

  [{type: 'module', exprs, loc: {start, end}}, final_ctx]

