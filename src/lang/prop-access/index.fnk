{advance, curr_loc, curr_value, next_matches} = import '@fink/prattler'
{add_operator} = import '@fink/prattler/symbols'
{token_error} = import '@fink/prattler/errors'

{symbol} = import '../symbols'
{single_expression} = import '../block'
{identifier} = import '../identifier'


member_expr = fn ctx, lbp:
  match ctx:
    next_matches:: ?, rx/[`'"(]/:
      single_expression:: ctx, lbp

    next_matches:: ?, rx/^\w+/:
      # TODO: reuse ../identifier
      # key_ctx = advance:: ctx
      identifier:: advance:: ctx


    else:
      throw token_error::
        'Expected member key to be an ident, string or group expr.'
        ctx.next_token
        ctx


prop_access = fn op, type:
  {
    ...symbol(op),

    led: fn lbp: fn ctx, left:
      {loc: {start}} = left
      [right, next_ctx] = member_expr:: ctx, lbp
      {loc: {end}} = right

      [{type, op, left, right, loc: {start, end}}, next_ctx]
  }


add_prop_access = fn ctx:
  pipe ctx:
    add_operator:: prop_access:: '.', 'member'

