{advance, has_errors} = import '@fink/prattler/parser.fnk'
{add_operator} = import '@fink/prattler/expressions.fnk'
{add_error} = import '@fink/prattler/errors.fnk'

{keywords} = import '../../lexer/tokens.fnk'

{infix} = import '../expressions.fnk'

{single_expression} = import '../block/expr.fnk'
{identifier} = import '../identifier/init.fnk'
{maybe_call_expr} = import '../call/expr.fnk'



member_expr = fn ctx, lbp:
  match ctx.next_token:
    {type: 'str-start'}:
      single_expression ctx, lbp

    {type: '('}:
      single_expression {...ctx, group_call: false}, lbp

    {type: 'ident'}:
      identifier advance ctx

    {type: ? in keywords}:
      identifier advance ctx

    else:
      add_error ctx,
        'Expected member key to be an ident, string or group expr.'
        ctx.next_token



prop_access = fn op, type:
  rec:
    ...infix op

    led: fn lbp: fn ctx, left:
      {loc: {start}} = left
      [right, next_ctx] = member_expr ctx, lbp

      match next_ctx:
        has_errors ?:
          [left, next_ctx]

        else:
          {loc: {end}} = right
          expr = {type, op, left, right, loc: {start, end}}
          maybe_call_expr expr, next_ctx



add_prop_access = fn ctx:
  pipe ctx:
    add_operator prop_access '.', 'member'

