{starts_with} = import '@fink/std-lib/str.fnk'
{split} = import '@fink/std-lib/regex.fnk'
{map, join, length} = import '@fink/std-lib/iter.fnk'
{obj_to_json} = import '@fink/std-lib/json.fnk'



get_comment = fn indent, comments:
  pipe comments:
    map fn {op, value}:
      match op:
        '#': '${indent}#${value}'
        else:
          lines = split value, '\n'
          pipe lines:
            map fn line: '${indent}--- ${line}'
            join '\n'
    join '\n'



trailing_comment = fn indent, node:
  match node:
    {comments: {trailing: 0 < length ?}}:
      comment = get_comment '${indent}', node.comments.trailing
      '\n${comment}'
    else: ''



str_type_op = fn {type, op, comments, loc: {start, end}}, indent:
  head = match op:
    ? and ? != type:
      '${type} ${op} (${start.line}:${start.column}-${end.line}:${end.column})'
    else:
      '${type} (${start.line}:${start.column}-${end.line}:${end.column})'

  leading = match comments:
    {leading: 0 < length ?}:
      comment = get_comment '${indent}', comments.leading
      '${comment}\n'
    else:  ''

  '${leading}${indent}${head}'



serialize_block = fn node, serialize, indent:
  head = str_type_op node, indent
  exprs = pipe node.exprs:
    map fn expr: serialize expr, '${indent}  '
    join '\n'

  match node:
    {args: []}:
      args = pipe node.args:
        map fn expr: serialize expr, '${indent}  '
        join '\n'

      arg_str = match node.args:
        0 == length ?: ':'
        else: '\n${args}\n${indent}  :'

      '${head}${arg_str}\n${exprs}'

    else:
      '${head}\n${exprs}'



serialize_call = fn node, serialize, indent:
  head = str_type_op node, indent

  callee = serialize node.callee, '${indent}  '
  args = pipe node.args:
    map fn expr: serialize expr, '${indent}  '
    join '\n'

  arg_str = match node.args:
    0 < length ?: '\n${args}'
    else: ''

  '${head}\n${callee}${arg_str}'



serialize_infix = fn node, serialize, indent:
  head = str_type_op node, indent

  left = serialize node.left, '${indent}  '

  right = match node:
    {right: false}: ''
    else: '\n${serialize node.right, '${indent}  '}'

  '${head}\n${left}${right}'



serialize_prefix = fn node, serialize, indent:
  head = str_type_op node, indent
  right = serialize node.right, '${indent}  '
  '${head}\n${right}'



serialize_spread = fn node, serialize, indent:
  match node:
    {right: false}: str_type_op node, indent
    else: serialize_prefix node, serialize, indent



serialize_str = fn node, serialize, indent:
  head = str_type_op node, indent

  tag = match node:
    {tag: false}: ''
    else: ' ${node.tag.value}'

  [lne, ...lns] = pipe node.exprs:
    map fn part:
      match part.type:
        'string:text': "'${part.value}'"
        else:
          value = serialize part, '${indent}  '
          '\n${value}\n'
    join ''
    split ?, '\n'

  pipe lns: map fn ln: '${indent}  ${ln}'

  indented = pipe lns:
    map fn ln: '${indent}  ${ln}'

  str = pipe [lne, ...indented]:
    join '\n'

  '${head}\n${indent}  ${tag}${str}'



serialize_regex = fn node, indent:
  head = str_type_op node, indent
  '${head}\n${indent}  /${node.value}/${node.flags}'



serialize_other = fn node, indent:
  head = str_type_op node, indent
  '${head} ${node.value}'



serialize_jsx = fn node, serialize, indent:
  head = str_type_op node, indent

  match node:
    {type: 'jsx:frag'}:
      children = pipe node.children:
        map fn expr: serialize expr, '${indent}  '
        join '\n'

      children_str = match node.children:
        0 < length ?: '\n${indent}  :\n${children}'
        else: ''

      '${head} ${children_str}'


    {type: 'jsx:elem'}:
      props = pipe node.props:
        map fn expr: serialize expr, '${indent}  '
        join '\n'

      children = pipe node.children:
        map fn expr: serialize expr, '${indent}  '
        join '\n'

      props_str = match node.props:
        0 < length ?: '\n${props}'
        else: ''

      children_str = match node.children:
        0 < length ?: '\n${indent}  :\n${children}'
        else: ''

      '${head} ${node.name.value}${props_str}${children_str}'

    {type: 'jsx:attr', value: ? != false}:
      name = serialize node.name, '${indent}  '
      value = serialize node.value, '${indent}  '
      '${head}\n${name}\n${value}'

    {type: 'jsx:attr'}:
      name = serialize node.name, '${indent}  '
      '${head}\n${name}'

    {type: 'jsx:text'}:
      '${head}\n${indent}  ${obj_to_json node.value}'

    {type: 'jsx:string'}:
      "${head}\n${indent}  '${node.value}'"

    {type: 'jsx:expr'}:
      expr = serialize node.expr, '${indent}  '
      '${head}\n${expr}'



serialize = fn node, indent='':
  result = match node:
    {error: {}}:
      '${indent}::error::'

    {type: 'empty'}:
      str_type_op node, indent

    {type: 'string'}:
      serialize_str node, serialize, indent

    {type: 'call'}:
      serialize_call node, serialize, indent

    {type: 'regex'}:
      serialize_regex node, indent

    {type: 'spread'}:
      serialize_spread node, serialize, indent

    {type: starts_with ?, 'jsx:'}:
      serialize_jsx node, serialize, indent

    {left: {}, right: {}}:
      serialize_infix node, serialize, indent

    {right: {}}:
      serialize_prefix node, serialize, indent

    {exprs: {}}:
      serialize_block node, serialize, indent

    {value: {}}:
      serialize_other node, indent

    else:
      head = str_type_op node, indent
      'Error: cannot serialize ${head}'

  '${result}${trailing_comment '${indent}', node}'
