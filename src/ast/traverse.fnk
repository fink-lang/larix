{chain} = import '@fink/std-lib/iter.fnk'



get_child_exprs = fn expr:
  match expr:
    {type: 'block', args: []}:
      [...expr.args, ...expr.exprs]

    {type: 'block'}:
      expr.exprs

    {type: 'call'}:
      [expr.callee, ...expr.args]

    {type: 'string', tag: {}}:
      [expr.tag, ...expr.exprs]

    {type: 'jsx:elem'}:
      [...expr.props,  ...expr.children]

    {type: 'jsx:frag'}:
      expr.children

    {type: 'jsx:attr', value: {type: 'jsx:expr'}}:
      [expr.value]

    {type: 'jsx:expr'}:
      [expr.expr]

    {type: 'rec:kv', left: expr.right}:
      [expr.left]

    {left: {}, right: {}}:
      [expr.left, expr.right]

    # {left: {}}:
    #   [expr.left]

    {exprs: []}:
      expr.exprs

    else:
      # console.log '----------------', expr.type, expr.value
      []


walk = fn exprs, parent=false:
  pipe exprs:
    map expr:
      children = get_child_exprs expr
      ... [[expr, parent]] | chain walk children, expr


