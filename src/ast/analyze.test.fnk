{describe, it, expect, to_match_snapshot} = import '@fink/jest/test.fnk'

{map, fold, flatten} = import '@fink/std-lib/iter.fnk'


{parse} = import '../parser.fnk'

{with_analyze, add_parents, add_binding_refs, add_duplicate_bindings, get_expr_id, get_scope} = import './analyze.fnk'
{walk_expr} = import './traverse.fnk'



collect_exprs = fold [], fn [expr], , , ctx: [expr, ctx]


collect_bindings = fn parsed:
  [, {bindings}] = collect_exprs parsed
  [...bindings | map fn expr: get_expr_id expr]



collect_refs = fn parsed:
  [, {refs}] = collect_exprs parsed

  list:
    ...pipe refs:
      map fn [expr_id, exprs]:
        exprs | map fn expr:
          '${get_expr_id expr} -> ${expr_id}'
      flatten


collect_scopes = fn parsed:
  [, ctx] = collect_exprs parsed
  list:
    ... ctx.bindings | map fn expr:
      '${get_expr_id expr}  ${get_expr_id get_scope expr, ctx}'



collect_duplicate_bindings = fn parsed:
  [, ctx] = collect_exprs parsed
  list:
    ... ctx.rebindings | map fn expr:
      '${get_expr_id expr}  ${get_expr_id get_scope expr, ctx}'




analyze = fn source, collector:
  pipe source:
    parse ?, 'test.fnk'
    walk_expr
    with_analyze
    add_parents
    add_binding_refs
    add_duplicate_bindings
    collector


source = '
  foo = 1234

  bar = fn spam, {...ham}:
    ni = spam.ni.nu + ham"\${foo.spam}"
    ni + undef

  {ni, na: {nu}} = {foo}
  {(ni): nini=nu, foo.bar: spam} = {foo: bar, (ni): nu, foo.bar.spam: 134}

  match bar foo:
    nu:
      ni = foo
      [...ni]


  <div />

  Spam = fn {children}:
    <>{children}</>

  <Spam ni shrub=nu spam={ham + 1}>
  </Spam>

  try:
    foo

  [ni, ..., nu] = [1234, "spam"]
  na = [...ni, false, true]
  fn foo: {foo}

  map fn ham:
    ham + 1
'


describe analyze, fn:

  it 'gets bindings', fn:
    expect
      analyze source, collect_bindings
      to_match_snapshot


  it 'gets duplicate bindings', fn:
    expect
      analyze source, collect_duplicate_bindings
      to_match_snapshot


  it 'gets refs', fn:
    expect
      analyze source, collect_refs
      to_match_snapshot


  it 'gets scopes', fn:
    expect
      analyze source, collect_scopes
      to_match_snapshot


